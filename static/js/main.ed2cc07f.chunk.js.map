{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["EVIDENCE","emf","fingerprints","freezing","orbs","writing","box","GHOSTS","name","evidence","valid","statuses","App","React","useState","ghosts","setGhosts","invalidGhosts","setInvalidGhosts","setEvidence","loaded","setLoaded","useEffect","Object","entries","map","key","status","filtered","filter","ghost","checkedEvidence","e","invertedEvidence","hasInvalidEvidence","some","includes","hasValidEvidence","isInvalidGhost","useCallback","className","onClick","newEvidence","statusIndex","indexOf","length","statusHandleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed2cc07f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst EVIDENCE = {\n  emf: \"EMF Level 5\",\n  fingerprints: \"Fingerprints\",\n  freezing: \"Freezing Temperatures\",\n  orbs: \"Ghost Orbs\",\n  writing: \"Ghost Writing\",\n  box: \"Spirit Box\",\n};\n\nconst GHOSTS = [\n  {\n    name: \"banshee\",\n    evidence: [EVIDENCE.emf, EVIDENCE.fingerprints, EVIDENCE.freezing],\n    valid: true,\n  },\n  {\n    name: \"demon\",\n    evidence: [EVIDENCE.freezing, EVIDENCE.box, EVIDENCE.writing],\n    valid: true,\n  },\n  {\n    name: \"jinn\",\n    evidence: [EVIDENCE.emf, EVIDENCE.orbs, EVIDENCE.box],\n    valid: true,\n  },\n  {\n    name: \"mare\",\n    evidence: [EVIDENCE.freezing, EVIDENCE.orbs, EVIDENCE.box],\n    valid: true,\n  },\n  {\n    name: \"oni\",\n    evidence: [EVIDENCE.emf, EVIDENCE.box, EVIDENCE.writing],\n    valid: true,\n  },\n  {\n    name: \"phantom\",\n    evidence: [EVIDENCE.emf, EVIDENCE.freezing, EVIDENCE.orbs],\n    valid: true,\n  },\n  {\n    name: \"poltergeist\",\n    evidence: [EVIDENCE.orbs, EVIDENCE.fingerprints, EVIDENCE.box],\n    valid: true,\n  },\n  {\n    name: \"revenant\",\n    evidence: [EVIDENCE.emf, EVIDENCE.fingerprints, EVIDENCE.writing],\n    valid: true,\n  },\n  {\n    name: \"shade\",\n    evidence: [EVIDENCE.emf, EVIDENCE.orbs, EVIDENCE.writing],\n    valid: true,\n  },\n  {\n    name: \"spirit\",\n    evidence: [EVIDENCE.box, EVIDENCE.fingerprints, EVIDENCE.writing],\n    valid: true,\n  },\n  {\n    name: \"wraith\",\n    evidence: [EVIDENCE.freezing, EVIDENCE.fingerprints, EVIDENCE.box],\n    valid: true,\n  },\n  {\n    name: \"yurei\",\n    evidence: [EVIDENCE.freezing, EVIDENCE.orbs, EVIDENCE.writing],\n    valid: true,\n  },\n];\n\nconst statuses = [\"⚪\", \"✔️\", \"❌\"];\n\nfunction App() {\n  const [ghosts, setGhosts] = React.useState([]);\n  const [invalidGhosts, setInvalidGhosts] = React.useState([]);\n  const [evidence, setEvidence] = React.useState([]);\n  const [loaded, setLoaded] = React.useState(false);\n\n  React.useEffect(() => {\n    setGhosts(GHOSTS);\n    setEvidence(\n      Object.entries(EVIDENCE).map(([key, name]) => ({\n        key,\n        name,\n        status: statuses[0],\n      }))\n    );\n    setLoaded(true);\n  }, []);\n\n  const statusHandleClick = (status, key) => {\n    const newEvidence = evidence.map((e) => {\n      const statusIndex =\n        statuses.indexOf(status) === statuses.length - 1\n          ? 0\n          : statuses.indexOf(status) + 1;\n\n      return {\n        ...e,\n        status: e.key === key ? statuses[statusIndex] : e.status,\n      };\n    });\n\n    setEvidence(newEvidence);\n  };\n\n  React.useEffect(() => {\n    const filtered =\n      loaded &&\n      ghosts\n        .filter((ghost) => {\n          const checkedEvidence = evidence\n            .filter(({ status }) => status === statuses[1])\n            .map((e) => EVIDENCE[e.key]);\n\n          const invertedEvidence = evidence\n            .filter(({ status }) => status === statuses[2])\n            .map((e) => EVIDENCE[e.key]);\n\n          const hasInvalidEvidence = checkedEvidence.some(\n            (e) => !ghost.evidence.includes(e)\n          );\n\n          const hasValidEvidence = invertedEvidence.some((e) =>\n            ghost.evidence.includes(e)\n          );\n\n          return hasInvalidEvidence || hasValidEvidence;\n        })\n        .map((ghost) => ghost.name);\n    setInvalidGhosts(filtered);\n  }, [evidence, ghosts, loaded]);\n\n  const isInvalidGhost = React.useCallback(\n    (ghost) => {\n      return invalidGhosts && invalidGhosts.includes(ghost.name);\n    },\n    [invalidGhosts]\n  );\n\n  return (\n    loaded && (\n      <div className=\"App\">\n        <header className=\"App-header\">Phasmophobia Evidence Matrix</header>\n        <section className=\"App-section-evidence\">\n          {evidence.map(({ key, name, status }) => (\n            <span className=\"Evidence-item\" onClick={() => statusHandleClick(status, key)} key={key}>\n              <span className=\"Evidence-status\">{status}</span>\n              <span className=\"Evidence-name\">{name}</span>\n            </span>\n          ))}\n        </section>\n        <section className=\"App-section-ghosts\">\n          {ghosts.map((ghost) => (\n            <span\n              key={ghost.name}\n              className={`Tag-ghost-${\n                isInvalidGhost(ghost) ? \"invalid\" : \"valid\"\n              }`}\n            >\n              {ghost.name}\n            </span>\n          ))}\n        </section>\n      </div>\n    )\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}